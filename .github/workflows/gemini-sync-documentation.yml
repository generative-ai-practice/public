name: 'ðŸ“š Gemini Documentation Sync'

on:
  push:
    branches:
      - 'main'
    paths:
      - 'src/**/*.ts'
      - 'scripts/**/*.ts'
      - 'package.json'
      - 'tsconfig.json'
      - '.github/workflows/**/*.yml'
      - '.github/workflows/**/*.yaml'
  workflow_dispatch: {}

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: false

defaults:
  run:
    shell: 'bash'

jobs:
  doc-sync:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
      pull-requests: 'write'
      id-token: 'write'
    steps:
      - name: 'Mint identity token'
        id: 'mint_identity_token'
        if: ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'
          permission-contents: 'write'
          permission-pull-requests: 'write'

      - name: 'Checkout repository'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8'

      - name: 'Check skip label on associated PR'
        id: 'check_skip_label'
        env:
          SKIP_LABEL: "${{ vars.GEMINI_DOC_SYNC_SKIP_LABEL || 'skip-gemini-doc-sync' }}"
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          script: |
            const labelName = process.env.SKIP_LABEL;
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });

            const match = prs.find((pr) =>
              pr.labels?.some((label) => label.name === labelName),
            );

            core.setOutput('skip', match ? 'true' : 'false');
            core.setOutput('label', labelName);
            if (match) {
              core.info(`Found label "${labelName}" on PR #${match.number}; documentation sync will be skipped.`);
            }

      - name: 'Enable Corepack'
        if: ${{ steps.check_skip_label.outputs.skip != 'true' }}
        run: |
          corepack enable

      - name: 'Set up Node.js'
        if: ${{ steps.check_skip_label.outputs.skip != 'true' }}
        uses: 'actions/setup-node@v4'
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 'Install dependencies'
        if: ${{ steps.check_skip_label.outputs.skip != 'true' }}
        run: |
          yarn install --immutable

      - name: 'Install Gemini CLI'
        if: ${{ steps.check_skip_label.outputs.skip != 'true' }}
        run: |
          npm install -g "@google/gemini-cli@${{ vars.GEMINI_CLI_VERSION }}"

      - name: 'Generate timestamp'
        id: 'timestamp'
        if: ${{ steps.check_skip_label.outputs.skip != 'true' }}
        run: |
          echo "value=$(date -u '+%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: 'Run Gemini documentation sync'
        if: ${{ steps.check_skip_label.outputs.skip != 'true' }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL: ${{ vars.GEMINI_DOC_SYNC_MODEL || 'gemini-1.5-pro' }}
        run: |
          # Create structured prompt file
          cat > doc_sync_prompt.txt << 'EOF'
          REPO: ${{ github.repository }}
          COMMIT SHA: ${{ github.sha }}

          You are a documentation specialist for a TypeScript translation project. Analyze the recent changes and provide structured output for documentation updates.

          Main branch was updated with changes to TypeScript source code. Please:

          1. Review the changes in src/, scripts/, and .github/workflows/ directories
          2. Update CLAUDE.md if development commands or architecture changed
          3. Update README_original.md if needed
          4. Check if translation system changes require updates to docs/*_original.md files
          5. Ensure any new environment variables are documented
          6. Update package.json scripts documentation if new commands were added
          7. Create new documentation files if needed (e.g., docs/api_original.md, docs/setup_original.md)

          Focus on:
          - Translation workflow documentation (original files only)
          - Development setup instructions
          - GitHub Actions workflow changes
          - API changes in the translation system
          - Configuration options and environment variables
          - New features that need documentation

          Guidelines:
          - Only update or create original (*_original) documentation files
          - Suggest creating new docs files for major new features
          - Consider docs/troubleshooting_original.md for common issues
          - Consider docs/contributing_original.md for development guidelines
          - Translated versions will be handled by the translation workflow

          IMPORTANT: Respond with a JSON structure like this:
          ```json
          {
            "actions": [
              {
                "type": "create",
                "file": "docs/api_original.md",
                "content": "# API Documentation\n\nThis documents the translation API...",
                "reason": "New API endpoints added for translation system"
              },
              {
                "type": "update",
                "file": "CLAUDE.md",
                "content": "Updated CLAUDE.md content here...",
                "reason": "New development commands added"
              }
            ],
            "targets_csv_additions": [
              {
                "relative_path": "docs/api_original.md",
                "src_lang": "en",
                "target_langs": "ja"
              }
            ]
          }
          ```
          EOF

          # Check if Gemini CLI is working
          if ! command -v gemini &> /dev/null; then
            echo "Gemini CLI not found, trying alternative installation..."
            npm install -g "@google/gemini-cli@latest" || echo "Failed to install Gemini CLI"
          fi

          # Create log directory and set filename
          mkdir -p gemini-doc-sync-logs
          LOG_DATE=$(date -u '+%Y-%m-%d')
          LOG_FILE="gemini-doc-sync-logs/${LOG_DATE}.md"

          # Run Gemini with error handling
          set +e  # Don't exit on error
          gemini --model "${GEMINI_MODEL}" "$(cat doc_sync_prompt.txt)" 2>&1 | tee "${LOG_FILE}"
          gemini_exit_code=${PIPESTATUS[0]}
          set -e  # Resume exit on error

          if [ $gemini_exit_code -ne 0 ]; then
            echo "Gemini CLI failed with exit code $gemini_exit_code"
            exit $gemini_exit_code
          fi

          if grep -qE 'Error when talking to Gemini API|Full report available at:' "${LOG_FILE}"; then
            echo "Gemini CLI returned success but response contains API error"
            echo "Gemini API error detected:"
            grep -E 'Error when talking to Gemini API|Full report available at:' "${LOG_FILE}"

            error_report=$(grep -oE '/tmp/gemini-client-error[^ ]+' "${LOG_FILE}" | head -n 1)
            if [ -n "$error_report" ] && [ -f "$error_report" ]; then
              echo '--- Gemini error report ---'
              cat "$error_report" || echo "Failed to read $error_report"
              echo '--- End Gemini error report ---'
            else
              echo "Gemini error report file not found or inaccessible"
            fi

            echo "Skipping documentation sync due to API error"
            exit 1
          fi

          # Process the response using yarn script
          echo "Processing Gemini response..."

          # Ensure modified_files.txt exists even if empty
          touch modified_files.txt

          set +e  # Don't exit on error
          yarn process-gemini-docs "${LOG_FILE}" || echo "Process script failed, continuing..."
          set -e  # Resume exit on error

          if [ ! -s "modified_files.txt" ]; then
            echo "No documentation changes detected; removing log artifacts."
            rm -f "${LOG_FILE}" modified_files.txt
          fi

          # Show what was processed
          echo "Modified files:"
          if [ -f modified_files.txt ]; then
            cat modified_files.txt
          else
            echo "(none)"
          fi

      - name: 'Check for changes'
        id: 'git_status'
        if: ${{ steps.check_skip_label.outputs.skip != 'true' }}
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: 'Create documentation sync pull request'
        if: ${{ steps.git_status.outputs.has_changes == 'true' }}
        uses: 'peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e'
        with:
          token: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}'
          branch: 'automation/gemini-doc-sync-${{ steps.timestamp.outputs.value }}'
          base: 'main'
          title: 'docs: sync documentation with code changes (Gemini)'
          commit-message: 'docs: sync documentation with code changes (Gemini)'
          body: |
            Automated Gemini documentation sync triggered by changes in main.

            Updates original documentation files to reflect code changes.
          add-paths: |
            CLAUDE.md
            README_original.md
            docs/*_original.md
            translations/targets.csv
            gemini-doc-sync-logs/
            modified_files.txt
          labels: "${{ vars.GEMINI_DOC_SYNC_SKIP_LABEL || 'skip-gemini-doc-sync' }}"
